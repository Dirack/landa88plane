#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Python3)
# 
# Purpose: Full velocity inversion with tomography.
# Velocity model with plane interfaces.
# 
# Site: https://www.geofisicando.com
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 31/01/2022
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

__author__="Rodolfo Dirack <rodolfo_profissional@hotmail.com>"
__version__="1.0"
__site__="https://www.geofisicando.com"

Help('''
    Depth velocity model inversion using tomography
    ===============================================
    (For plane Interfaces)

    Author: %s
    Version: %s
    Site: %s
    ''' % (__author__,__version__,__site__))

# Madagascar Package
from rsf.proj import *

# Madagascar Recipes
from rsf.recipes.pefInterpolation import pefInterpolation as pef
from rsf.recipes.kimodel import multiLayerModelBuild as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod
from rsf.recipes.utils import arr2str, Pull, velplot

# Search Window
minvel=[1.45,1.60,1.7,2.0]
maxvel=[1.65,1.9,2.,2.5]
tryvel=[1.46,1.62,1.7,2.0]

### velocity inversion using parameters ###
cds = ARGUMENTS.get('cds','n') # Use CDS instead of CRE traveltime
ni = int(ARGUMENTS.get('ni',1)) # Number of iterations in inversion loop
nit = int(ARGUMENTS.get('nit',100)) # Number of iterations in tomography
nitf = int(ARGUMENTS.get('nitf',3)) # Number of interfaces
model = 'model_0' # Constant velocity model

helpstr="Model with %d plane interfaces\nVelocity Window Search (km/s):\n" % (len(tryvel)-1)
for i in range(len(tryvel)-1):
    helpstr += "\tInterface %d - %.2f to %.2f - First velocity %.2f\n" % (i,minvel[i],maxvel[i],tryvel[i])

Help('''
### Velocity inversion using tomography ###

%s
''' % (helpstr))

# Main Files
trueModel='trueModel'
stackedSection='stackedSection'
parametersCube='parametersCube'
interpolatedDataCube='interpolatedDataCube'

# fetch files
Pull([stackedSection,parametersCube,interpolatedDataCube,trueModel],
        path=os.environ.get('RSFSRC')+
        '/user/creGatherStack/experiments/constLayersModels/model4/backup/')

Flow('sz_2',None,'math output="x2" n1=21 d1=0.5 o1=-2 n2=3 d2=0.45 o2=1')
sz='sz_2'

Flow('constv',None,'math output="2." n1=301 n2=1001 d1=0.01 d2=0.01 o2=-2 o1=0')
model='constv'
sv='sv_2'

Flow('sv_2.asc',None,
	'''
	echo 1.45 1.62 1.7 2. n1=4 data_format=ascii_float in=${TARGETS[0]}
	''')

# Layer's velocity
Flow(sv,'sv_2.asc',
	'''
	dd type=float form=native
	''')

picks=[]
for i in range(nitf):
    Flow('pick'+str(i)+'.txt',parametersCube,'window n3=1 f3=3 | ipick color=j title="Pick-interface-%d"' %i)
    picks.append('pick'+str(i)+'.txt')
    files=['t0s'+str(i),'m0s'+str(i)]
    k=0
    for f in files:
            Flow(f+'.asc','pick'+str(i)+'.txt',
            '''
            pick2asc ${TARGETS} %d
            ''' % k)

            Flow(f,f+'.asc','dd type=float form=native | put n2=1 d2=1 o2=0')
            k=k+1

    files=['rns'+str(i),'rnips'+str(i),'betas'+str(i)]
    k=0
    for f in files:
            Flow(f,[parametersCube,'t0s'+str(i),'m0s'+str(i)],
            '''
            window n3=1 f3=%d |
            getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]}
            ''' %k)
            k=k+1

    # Generate shotsfile and anglefile for NIP sources
    Flow('s2'+str(i),'m0s'+str(i),'spike mag=0')

    Flow('shotsfile'+str(i),['s2'+str(i),'m0s'+str(i)],'rcat ${SOURCES[1]} axis=2 | transp')

    Flow('anglefile'+str(i),[parametersCube,'t0s'+str(i),'m0s'+str(i)],
            '''
            window n3=1 f3=2 |
            getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]} beta=y
            ''')

    t0s='t0s'+str(i)
    m0s='m0s'+str(i)
    betas='betas'+str(i)
    rnips='rnips'+str(i)
    shotsfile='shotsfile'+str(i)

    velinv = 'modelinv_%d' % i
    vspline = 'vspline_%d' % i
    zspline = 'zspline_%d' %i
    otsemb = 'otsemb_%d' %i
    if(i==0):
            first='y'
    Flow([velinv,vspline,zspline,otsemb],[model,t0s,m0s,rnips,betas,sv,interpolatedDataCube,shotsfile,sz],
        '''
        landa88_plane t0s=${SOURCES[1]} m0s=${SOURCES[2]} rnips=${SOURCES[3]} betas=${SOURCES[4]} sv=${SOURCES[5]} vspline=${TARGETS[1]} data=${SOURCES[6]} shotsfile=${SOURCES[7]} sz=${SOURCES[8]} zspline=${TARGETS[2]} v0=1.508 nit=%d c0=0.2 temp0=2 minvel=%g maxvel=%g first=%s itf=%d otsemb=${TARGETS[3]} cds=%s
        ''' % (nit,minvel[i],maxvel[i],first,i,cds))

    model = velinv
    sv = vspline
    sz = zspline
    first = 'n'

#### Model ####
Flow('interfaces_spline',zspline,
        '''
        spline o1=-2 d1=0.01 n1=1001
        ''')

velinv = 'velinv_res'

Flow(velinv,[sv,'interfaces_spline'],'modelbuild nz=301 dz=0.01 oz=0 sz=${SOURCES[1]}')

### Plot results ####
Flow('pick.txt',picks,'/usr/bin/cat $SOURCES')
files=['t0s','m0s']
i=0
for f in files:
	Flow(f+'.asc','pick.txt',
	'''
	pick2asc ${TARGETS} %d
	'''%i)

	Flow(f,f+'.asc','dd type=float form=native | put n2=1 d2=1 o2=0')
	i=i+1

files=['rns','rnips','betas']
i=0
for f in files:
	Flow(f,[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=%d |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]}
	''' %i)
	i=i+1

# Generate shotsfile and anglefile for NIP sources
Flow('s2','m0s','spike mag=0')

Flow('shotsfile',['s2','m0s'],'rcat ${SOURCES[1]} axis=2 | transp')

Flow('anglefile',[parametersCube,'t0s','m0s'],
	'''
	window n3=1 f3=2 |
	getparameter t0s=${SOURCES[1]} m0s=${SOURCES[2]} beta=y
	''')

# NIP model setup after velocity model inversion,
# ray-tracing from acquisition surface to NIP sources
Flow(['ray2','nipangles2'],[velinv,'shotsfile','anglefile','t0s'],
        '''
        nipmodsetup shotsfile=${SOURCES[1]} anglefile=${SOURCES[2]} t0s=${SOURCES[3]} nipangles=${TARGETS[1]} | dd type=complex
        ''')

Flow('result','ray2','sfdd type=float')

Plot('velocityModel',velinv,velplot("Inverted velocity model",param="max1=3 min1=0 min2=1 max2=5"))

Plot('inverted-nipsources','ray2','sfgraph scalebar=y symbol=+ transp=y yreverse=y max1=3 min1=0 min2=1 max2=5 wanttitle=n wantaxis=n plotcol=7 symbolsz=10')

Plot('inverted-interfaces',['velocityModel','inverted-nipsources'],'Overlay')

Plot(trueModel,velplot("Original velocity model",param="max1=3 min1=0 min2=1 max2=5"))

Plot('mod1-img',[trueModel,'inverted-nipsources'],'Overlay')

# Plot result: Inverted and original models side by side
Result('inverted-original',['inverted-interfaces','mod1-img'],'SideBySideIso')

End()
